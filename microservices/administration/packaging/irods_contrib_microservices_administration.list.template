# =-=-=-=-=-=-=-
# EPM Variables
# =-=-=-=-=-=-=-
%product iRODS Contrib Administration Microservices
%copyright 2015, The University of North Carolina at Chapel Hill
%vendor Renaissance Computing Institute <info@irods.org>
%license LICENSE
%readme README
%description The integrated Rule-Oriented Data System
%version TEMPLATE_PLUGINVERSION TEMPLATE_PLUGINVERSIONINT

%requires irods

%if DEB
%requires libc6
%endif

%format all

# =-=-=-=-=-=-=-
# Install variables
# =-=-=-=-=-=-=-
$IRODS_HOME_DIR=/var/lib/irods

# =-=-=-=-=-=-=-
# preinstall
# =-=-=-=-=-=-=-
%preinstall << END_PREINSTALL

# determine whether this is an upgrade
if [ "$$1" -eq "$$1" ] 2>/dev/null ; then
  # integer, therefore rpm
  if [ $$1 -gt 1 ] ; then
    PACKAGEUPGRADE="true"
  else
    PACKAGEUPGRADE="false"
  fi
else
  # string, therefore deb
  if [ "$$1" = "upgrade" ] ; then
    PACKAGEUPGRADE="true"
  else
    PACKAGEUPGRADE="false"
  fi
fi

if [ "$$PACKAGEUPGRADE" = "true" ] ; then
  echo "NOP" > /dev/null
else
  echo "NOP" > /dev/null
fi

END_PREINSTALL

# =-=-=-=-=-=-=-
# post install
# =-=-=-=-=-=-=-
%postinstall << END_POSTINSTALL
. /etc/irods/service_account.config 2> /dev/null
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/plugins/microservices/libmsiforce_resource.so
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/plugins/microservices/libmsifree_microservice_out.so
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/plugins/microservices/libmsiencrypt_replica.so
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/plugins/microservices/libmsicompound_archive_object.so
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/rules
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/rules/test_msifree_microservice_out.r
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/rules/test_msiencrypt_replica.r
chown $$IRODS_SERVICE_ACCOUNT_NAME:$$IRODS_SERVICE_GROUP_NAME ${IRODS_HOME_DIR}/rules/move2DA.r
END_POSTINSTALL

# =-=-=-=-=-=-=-
# preremove
# =-=-=-=-=-=-=-
%preremove << END_PREREMOVE
END_PREREMOVE

# =-=-=-=-=-=-=-
# post remove
# =-=-=-=-=-=-=-
%postremove << END_POSTREMOVE

# determine whether this is an upgrade
if [ "$$1" -eq "$$1" ] 2>/dev/null ; then
  # integer, therefore rpm
  if [ $$1 -gt 0 ] ; then
    PACKAGEUPGRADE="true"
  else
    PACKAGEUPGRADE="false"
  fi
else
  # string, therefore deb
  if [ "$$1" = "upgrade" ] ; then
    PACKAGEUPGRADE="true"
  else
    PACKAGEUPGRADE="false"
  fi
fi

if [ "$$PACKAGEUPGRADE" = "true" ] ; then
   echo "NOP" > /dev/null
else
   echo "NOP" > /dev/null
fi

END_POSTREMOVE

# =-=-=-=-=-=-=-
# Full File Listing
# =-=-=-=-=-=-=-
f 644 root root ${IRODS_HOME_DIR}/plugins/microservices/libmsiforce_resource.so ./msiforce_resource/libmsiforce_resource.so
#f 644 root root ${IRODS_HOME_DIR}/plugins/microservices/libmsisync_to_archive.so ./msisync_to_archive/libmsisync_to_archive.so
f 644 root root ${IRODS_HOME_DIR}/plugins/microservices/libmsifree_microservice_out.so ./msifree_microservice_out/libmsifree_microservice_out.so
f 644 root root ${IRODS_HOME_DIR}/plugins/microservices/libmsiencrypt_replica.so ./msiencrypt_replica/libmsiencrypt_replica.so
f 644 root root ${IRODS_HOME_DIR}/plugins/microservices/libmsicompound_archive_object.so ./msicompound_archive_object/libmsicompound_archive_object.so
d 755 root root ${IRODS_HOME_DIR}/rules -
f 644 root root ${IRODS_HOME_DIR}/rules/test_msifree_microservice_out.r ./msifree_microservice_out/test_msifree_microservice_out.r
f 644 root root ${IRODS_HOME_DIR}/rules/test_msiencrypt_replica.r ./msiencrypt_replica/test_msiencrypt_replica.r
f 644 root root ${IRODS_HOME_DIR}/rules/move2DA.r ./msicompound_archive_object/move2DA.r
